#!/bin/bash

declare portFile initFile ttystate script waitFile
declare -i pid port streamPid continue pipePid exitStatus
declare -a args signals

continue=1

# The name of the file which will contain the port number
name="fury"
baseDir="$XDG_RUNTIME_DIR/$name"
portFile="$baseDir/port"
initFile="$baseDir/init"
waitFile="$baseDir/wait"
failFile="$baseDir/fail"
script="$0"
exitStatus=0

# The set of signals which should be captured and forwarded to the JVM process
signals=(INT WINCH TERM USR1 USR2)

pid=$$
args=("$@")

if [ -t 0 ]
then ttystate="$(stty -g)"
fi

recovery() {
  restoreTty
  printf "The daemon process failed to start within 10 seconds.\n"
  printf "Remove the file %s before trying again.\n" "$failFile"
  exit 1
}

restoreTty() {
  if [ -t 0 ]
  then stty "$ttystate"
  fi
}

launch() {
  mkfifo "$waitFile" 2> /dev/null && exec nohup wrath -x > /home/propensive/work/exoskeleton/out.log 2>&1 &
  flock "$initFile" sh -c "test -f \"$portFile\" || cat \"$waitFile\""
  rm -f "$initFile"
}

daemon() {
  if [ -f "$failFile" ]
  then recovery
  fi

  mkdir -p "$baseDir"
  flock -n "$portFile" rm "$portFile"
  if [ ! -f "$portFile" ]
  then launch
  fi
  port=$(cat "$portFile")
}

handle() {
  case "$1" in
    TERM) continue=0 ;;
    USR1) exitStatus=1 ;;
    USR2) exitStatus=2 ;;
  esac
  printf "signal %s\nprocess %s\n" "$1" "$pid" | nc -q 1 localhost $port || terminate "Lost server connection"
}

registerTraps() {
  for signal in "${signals[@]}"
  do trap "handle $signal" "$signal"
  done
}

stream() {
  printf "process %s\n" "$pid"
  printf "script %s\n" "$script"
  printf "work %s\n" "$(pwd)"

  for arg in "${args[@]}"
  do printf "arg\n    %s\n" "$arg"
  done

  while IFS= read -r -d $'\0' variable
  do printf "env\n    %s\n" "$variable"
  done < <(env -0)

  if [ -t 0 ]
  then printf "input term\n"
  else printf "input pipe\n"
  fi

  printf "##\n"
  exec cat
}

pipe() {
  local tmpPipe
  tmpPipe="$(mktemp -u)"
  mkfifo -m 600 "$tmpPipe"
  exec 3<> "$tmpPipe"
  rm "$tmpPipe"
  stream <&0 >&3 &
  streamPid=$!
  nc -q 1 localhost $port <&3 &
  pipePid=$!
}

if [ -t 0 ]
then stty intr undef -echo -icanon raw opost > /dev/null 2>&1
fi

daemon
pipe
registerTraps

while [ $continue = 1 ]
do
  wait $pipePid
  if ! ps $pipePid >/dev/null
  then continue=0
  fi
done

if [ -t 0 ]
then
  kill $streamPid
  restoreTty
fi

exit 0