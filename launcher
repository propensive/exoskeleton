#!/bin/bash

declare portFile initFile ttystate script
declare -i pid port streamPid continue pipePid daemonPid
declare -a args signals

continue=1

# The name of the file which will contain the port number
furyDir="$XDG_RUNTIME_DIR/fury"
portFile="$furyDir/port"
initFile="$furyDir/init"
failFile="$furyDir/fail"
script="$0"

# The set of signals which should be captured and forwarded to the JVM process
signals=(INT WINCH TERM)

pid=$$
args=("$@")

if [ -t 0 ]
then ttystate="$(stty -g)"
fi

recovery() {
  restoreTty
  printf "The daemon process failed to start within 10 seconds.\n"
  printf "Remove the file %s before trying again.\n" "$failFile"
  exit 1
}

restoreTty() {
  if [ -t 0 ]
  then stty "$ttystate"
  fi
}

launch() {
  if [ -p "$initFile" ]
  then
    printf "Waiting...\n"
    sleep 10
    if [ -p "$initFile" ]
    then rm -f "$initFile"
    fi
  fi
  mkfifo "$initFile" 2>/dev/null && exec nohup wrath -x > /home/propensive/work/exoskeleton/out.log 2>&1 &
  timeout 10 cat "$initFile" || (touch "$failFile" && rm -f "$initFile")
  daemon
}

daemon() {
  if [ -f "$failFile" ]
  then recovery
  fi

  mkdir -p "$furyDir"
  flock -n "$portFile" rm "$portFile"
  if [ ! -f "$portFile" ]
  then launch
  fi
  port=$(cat "$portFile")
}

terminate() {
  continue=0
  printf '\n%s\n' "$1"
  kill -TERM -$pid
}

signal() {
  if [ "$1" = "TERM" ]
  then continue=0
  fi
  printf "signal %s\nprocess %s\n" "$1" "$pid" | nc -q 1 localhost $port || terminate "Lost server connection"
}

registerTraps() {
  for signal in "${signals[@]}"
  do trap "signal $signal" "$signal"
  done
}

stream() {
  printf "process %s\n" "$pid"
  printf "script %s\n" "$script"

  for arg in "${args[@]}"
  do printf "arg %s\n" "$arg"
  done

  while IFS= read -r -d $'\0' variable
  do printf "env\n    %s\n" "$variable"
  done < <(env -0)

  if [ -t 0 ]
  then printf "input term\n"
  else printf "input pipe\n"
  fi

  printf "##\n\n"
  exec cat
}

pipe() {
  local tmpPipe
  tmpPipe="$(mktemp -u)"
  mkfifo -m 600 "$tmpPipe"
  exec 3<> "$tmpPipe"
  rm "$tmpPipe"
  stream <&0 >&3 &
  streamPid=$!
  nc -q 1 localhost $port <&3 &
  pipePid=$!
}

if [ -t 0 ]
then stty intr undef -echo -icanon min 1 raw time 0 >/dev/null 2>&1
fi

daemon && pipe
registerTraps

while [ $continue = 1 ]
do
  wait $pipePid
  if ! ps $pipePid >/dev/null
  then continue=0
  fi
done

kill $streamPid
restoreTty