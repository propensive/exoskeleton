#!/bin/bash

declare portFile initFile ttystate script waitFile tmpPipe
declare -i pid port streamPid continue pipePid
declare -a args signals sttyOptions


# The name of the file which will contain the port number
name="fury"

# The TTY settings to use for terminal input
sttyOptions=(intr undef -echo icanon raw opost)

baseDir="${XDG_RUNTIME_DIR:-$HOME/.local/state}/$name"
portFile="$baseDir/port"
initFile="$baseDir/init"
waitFile="$baseDir/wait"
failFile="$baseDir/fail"
script="$(realpath "$0")"
continue=1

# The set of signals which should be captured and forwarded to the JVM process
signals=(INT WINCH TERM USR1 USR2)

pid=$$
args=("$@")

backOut() {
  if [ -f "$failFile" ]
  then
    test -t 0 && stty "$ttystate" && echo -en "\033[?1004l\033[?2004h"
    printf "The daemon process failed to start.\n" >&2
    printf "Remove the file %s before trying again.\n" "$failFile" >&2
    exit 1
  fi
}

abort() {
  touch "$failFile"
  printf '' > "$waitFile"
  rm -f "$waitFile" "$initFile"
}

launch() {
  mkfifo "$waitFile" 2> /dev/null && (exec nohup wrath -x > /home/propensive/work/exoskeleton/out.log 2>&1 || abort) &
  flock "$initFile" sh -c "test -f \"$portFile\" || cat \"$waitFile\"" > /dev/null 2>&1 || abort
  rm -f "$initFile"
}

handle() {
  case "$1" in
    TERM) continue=0 ;;
  esac
  echo "launcher script got signal"
  printf "s\n%s\n%s\n" "$pid" "$1" | nc -q 1 localhost $port
}

connect() {
  echo "i"
  test -t 0 && echo "t" || echo "p"
  echo "$pid"
  echo "$script"
  pwd
  printf '%s\0' "${args[@]}"
  echo ""
  echo "##"
  env -0
  echo ""
  echo "##"
  exec cat
}

test -t 0 && ttystate="$(stty -g)"
mkdir -p "$baseDir"
test -t 0 && stty "${sttyOptions[@]}" > /dev/null 2>&1
backOut
flock -n "$portFile" rm "$portFile"
test -f "$portFile" || launch
backOut
port=$(<"$portFile")

tmpPipe="$(mktemp -u)"
mkfifo -m 600 "$tmpPipe"
exec 3<> "$tmpPipe"
rm "$tmpPipe"
connect <&0 >&3 &
streamPid=$!
nc -q 1 localhost $port <&3 &
pipePid=$!

for signal in "${signals[@]}"
do trap "handle $signal" "$signal"
done

while [ $continue = 1 ]
do
  wait $pipePid
  ps $pipePid > /dev/null || continue=0
done

test -t 0 && stty "$ttystate" && echo -en "\033[?1004l\033[?2004h" && kill $streamPid

exit 0
