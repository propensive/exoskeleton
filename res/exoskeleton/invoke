#!/bin/sh

SCRIPTDIR="$(cd -- "$(dirname -- "$0")" > /dev/null 2>&1 && pwd)"
THIS="$(basename "$0")"
ARGS="$(printf '%s\t' "$@")"
ARGCOUNT="$#"
PID="$$"
RUNDIR="${XDG_RUNTIME_DIR:-${TMPDIR:-${SCRIPTDIR}/.cache}}"
MDATE="$(date -r "$0" +%s)"
FIFO="$RUNDIR/$THIS-$MDATE.sock"
STDOUT="$RUNDIR/$THIS-$PID.stdout.sock"
STDIN="$RUNDIR/$THIS-$PID.stdin.sock"
EXITFILE="$RUNDIR/$THIS-$PID.exit"
BASEURL="https://api.adoptium.net"
TYPE="jdk"
ACCESS="ea"
FORCE="0"
VERSION="20"
CHECK="0"

base() {
  local DIR="${XDG_DATA_HOME:-${HOME}/.local/share}/oubliette"
  mkdir -p "${DIR}"
  printf "%s" "${DIR}"
}

canonicalize() {
  local FILE="${1}"
  cd "$(dirname "${FILE}")"
  FILE="$(basename ${FILE})"
  while [ -L "${FILE}" ]
  do
    FILE="$(readlink "${FILE}")"
    cd "$(dirname "${FILE}")"
    FILE="$(basename "${FILE}")"
  done
  printf "$(pwd -P)/${FILE}"
}

tmpdir() {
  mkdir -p "$(base)/tmp"
  mktemp -d "$(base)/tmp/XXXXXX"
}

dist() {
  local DIR="$(base)/dist"
  mkdir -p "${DIR}"
  printf "%s" "${DIR}"
}

os() {
  case "$(uname -s)" in
    Linux|GNU*)       printf "linux" ;;
    Win*|Cygwin|Msys) printf "windows" ;;
    Mac*|Darwin*)     printf "mac" ;;
    SunOS)            printf "solaris" ;;
    *)                fail os "$(uname -s)" ;;
  esac
}

arch() {
  case "$(uname -m)" in
    x86_64|amd64|i686-64)                   printf "x64" ;;
    x86|i686|i386|i86pc)                    printf "x86" ;;
    aarch64_be|aarch64|armv8b|armv8l|arm64) printf "aarch64" ;;
    *)                                      fail arch "$(uname -m)" ;;
  esac
}

download() {
  TMP="$(tmpdir)"
  if [ "$(command -v curl)" ]
  then
    msg "Downloading Java ${VERSION} from ${LINK}"
    curl -sL "${LINK}" | tar xz -C "${TMP}" 2> /dev/null || fail download "${VERSION}" "${ARCH}" "${OS}"
    msg "Download complete"
  elif [ "$(command -v wget)" ]
  then
    msg "Downloading Java ${VERSION} from ${LINK}"
    wget -q -O - "${LINK}" | tar xz -C "${TMP}" 2> /dev/null || fail download "${VERSION}" "${ARCH}" "${OS}"
    msg "Download complete"
  else
    rmdir "${TMP}" > /dev/null 2>&1
    fail curl
  fi
  DIR="$(dirname "$(find "${TMP}" -name release | head -n1)")"
  FULL="$(. "${DIR}/release" ; printf "%s" "${JAVA_VERSION}")"
  TARGET="$(dist)/${FULL}-${TYPE}"
  rm -rf "${TARGET}"
  msg "Installing Java ${VERSION} in ${TARGET}"
  mv "${DIR}" "${TARGET}"
  rm -rf "${TMP}"
  mkdir -p "$(base)/refs"
  (cd "$(base)/refs" && ln -sf "../dist/${FULL}-${TYPE}" "${VERSION}-${TYPE}")
}

hl() {
  printf "\e[32m%s\e[0m" "${1}"
}

msg() {
  if [ "${VERBOSE}" = "1" ]
  then printf "%s%s\e[0m\n" "${PREFIX}" "${1}"
  fi
}

fail() {
  if [ -d "${TMP}" ]
  then rm -rf "${TMP}"
  fi
  printf "%s" "${PREFIX}"

  case "${1}" in
    "download") printf "Could not download Adoptium OpenJDKâ„¢ %s for %s on %s.\n" "$(hl "${2}")" "$(hl "${3}")" "$(hl "${4}")" 1>&2 ;;
    "arch")     printf "The machine's architecture (%s) was not recognised.\n" "$(hl "${2}")" 1>&2 ;;
    "os")       printf "The machine's operating system (%s) was not recognised.\n" "$(hl "${2}")" 1>&2 ;;
    "curl")     printf "Either %s or %s must be available on the path to download Java.\n" "$(hl "${2}")" "$(hl "${3}")" 1>&2 ;;
    "exec")     printf "The file %s is not an executable.\n" "$(hl "${2}")" 1>&2 ;;
    "option")   printf "The command-line option %s was not recognised.\n" "$(hl "${2}")" 1>&2 ;;
    "command")  printf "The given subcommand (%s) was not recognised.\n" "$(hl "${2}")" 1>&2 ;;
    "missing")  printf "The value for option %s was not specified.\n" "$(hl "${2}")" 1>&2 ;;
  esac
  exit 1
}

get() {
  OS="$(os)"
  ARCH="$(arch)"
  LINK="${BASEURL}/v3/binary/latest/${VERSION}/${ACCESS}/${OS}/${ARCH}/${TYPE}/hotspot/normal/eclipse"
  SYMLINK="$(base)/refs/${VERSION}-${TYPE}"

  if [ -L "${SYMLINK}" ] && [ "${FORCE}" = "0" ]
  then JAVA=$(canonicalize "${SYMLINK}")
  else
    download
    JAVA=$(canonicalize "${SYMLINK}")
  fi
}

server() {
  if [ ! -d "$RUNDIR" ]; then
    mkdir -p "$RUNDIR"
  fi
  mkfifo "$FIFO"
  (sleep infinity) > "$FIFO" &
  WAITPID="$!"

  get
  
  exec "${JAVA}/bin/java" \
      -Xss1536k \
      --enable-preview \
      -Dsun.misc.URLClassPath.disableJarChecking \
      -Dexoskeleton.script="$THIS" \
      -Dexoskeleton.fifo="$FIFO" \
      -Dexoskeleton.pid="$PID" \
      -Dexoskeleton.watch="$WAITPID" \
      -jar "$SCRIPTDIR/$THIS" &
}

connect() {
  mkfifo "$STDOUT" "$STDIN" "$EXITFILE"
  echo "PROCESS	$PID" > "$FIFO"
  echo "SCRIPT	$PID	$SCRIPTDIR	$THIS" > "$FIFO"
  echo "RUNDIR	$PID	$RUNDIR" > "$FIFO"
  echo "ARGS	$PID	$ARGCOUNT	$ARGS" > "$FIFO"
  echo "ENV	$PID	$(env | tr '\n' '\t')" > "$FIFO"
  echo "START	$PID" > "$FIFO"
  cat - 2> /dev/null > "$STDIN" <&0 &
  WAITPID="$!"
  cat "$STDOUT" &
  WRITERPID="$!"
  EXIT="$(cat "$EXITFILE")"
  
  if [ "$EXIT" = "99" ]
  then
    case "$-" in
      *i*) stty -echo -icanon -isig min 1 time 0 ;;
    esac
    EXIT="$(cat "$EXITFILE")"
  fi
  
  kill "$WAITPID" > /dev/null 2>&1
  rm -f "$STDOUT" "$STDIN" "$EXITFILE"
  case "$-" in
    *i*) stty sane
  esac
  exit "${EXIT:-1}"
}

resize() {
  echo "RESIZE	$PID" > "$FIFO"
}

cleanup() {
  case "$-" in
    *i*) stty sane
  esac
  kill "${WAITPID}" > /dev/null 2>&1
  printf "\e[0J\e[?25h"
}

trap cleanup EXIT
trap resize WINCH

if [ ! -p "$FIFO" ]
then
  server
else
  if [ -f "$FIFO" ]
  then
    echo "Cannot create named pipe at $FIFO"
    exit 1
  fi
fi
connect
exit 1
