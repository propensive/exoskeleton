#!/bin/sh

SCRIPTDIR="$(cd -- "$(dirname -- "$0")" > /dev/null 2>&1 && pwd)"
THIS="$(basename "$0")"
ARGS="$(printf '%s\t' "$@")"
ARGCOUNT="$#"
PID="$$"
RUNDIR="${XDG_RUNTIME_DIR:-${TMPDIR:-${SCRIPTDIR}/.cache}}"
MDATE="$(date -r "$0" +%s)"
FIFO="$RUNDIR/$THIS-$MDATE.sock"
STDOUT="$RUNDIR/$THIS-$PID.stdout.sock"
STDIN="$RUNDIR/$THIS-$PID.stdin.sock"
EXITFILE="$RUNDIR/$THIS-$PID.exit"

server() {
  if [ ! -d "$RUNDIR" ]; then
    mkdir -p "$RUNDIR"
  fi
  mkfifo "$FIFO"
  (while true; do sleep 3600; done) > "$FIFO" &
  CATPID="$!"
  exec java -Dsun.misc.URLClassPath.disableJarChecking -jar "$SCRIPTDIR/$THIS" "::start::" "$THIS" "$FIFO" "$PID" "$CATPID" &
}

connect() {
  mkfifo "$STDOUT" "$STDIN" "$EXITFILE"
  echo "PROCESS	$PID" > "$FIFO"
  echo "SCRIPT	$PID	$SCRIPTDIR	$THIS" > "$FIFO"
  echo "RUNDIR	$PID	$RUNDIR" > "$FIFO"
  echo "ARGS	$PID	$ARGCOUNT	$ARGS" > "$FIFO"
  echo "ENV	$PID	$(env | tr '\n' '\t')" > "$FIFO"
  echo "START	$PID" > "$FIFO"
  cat - > "$STDIN" <&0 &
  CATPID="$!"
  cat "$STDOUT"
  EXIT="$(cat "$EXITFILE")"
  kill "$CATPID"
  rm -f "$STDOUT" "$STDIN" "$EXITFILE"
  exit "${EXIT:-1}"
}

cleanup() {
  if [ -p "$FIFO" ]
  then
    echo "STOP	$PID" > "$FIFO"
  fi
}

trap cleanup INT TERM HUP

if [ ! -p "$FIFO" ]
then
  server
else
  if [ -f "$FIFO" ]
  then
    echo "Cannot create named pipe at $FIFO"
    exit 1
  fi
fi
connect
exit 1
