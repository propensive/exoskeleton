#!/bin/bash

declare portFile initFile ttystate script waitFile tmpPipe javaVersion dataHomeDir
declare -i pid port stdoutPid continue pipePid argCount launchPid
declare -a args signals sttyOptions

# The TTY settings to use for terminal input
sttyOptions=(intr undef -echo icanon raw opost)

name="$(basename $0)"
baseDir="${XDG_RUNTIME_DIR:-$HOME/.local/state}/$name"
dataHomeDir="${XDG_DATA_HOME:-$HOME/.local/share}"
portFile="$baseDir/port"
initFile="$baseDir/init"
waitFile="$baseDir/wait"
failFile="$baseDir/fail"
script="$(realpath "$0")"
javaVersion="21"
javaHome="$dataHomeDir/java/$javaVersion"
continue=1

# The set of signals which should be captured and forwarded to the JVM process
signals=(INT WINCH TERM)

pid=$$
args=("$@")
argCount=$#

backOut() {
  if [ -f "$failFile" ]
  then
    test -t 0 && stty "$ttystate"
    printf "The daemon process failed to start.\n" >&2
    printf "Remove the file %s before trying again.\n" "$failFile" >&2
    exit 1
  fi
}

ensure() {
  command -v "$1" > /dev/null || printf "The command %s is required, but was not found. Please install it and try again.\n" "$1" 1>&2
  command -v "$1" > /dev/null || exit 1
}

installJava() {
  mkdir -p "$dataHomeDir/java"
  ensure unzip
  unzip -p "$script" exoskeleton/jre_$(uname -m).tar.gz 2>/dev/null | tar xzf - -C "$dataHomeDir/java"
  mv "$dataHomeDir/java/jdk-21.0.1+12-jre" "$javaHome"
}

abort() {
  touch "$failFile"
  printf '' > "$waitFile"
  rm -f "$waitFile" "$initFile"
}

launch() {
  test -x "$javaHome/bin/java" || installJava
  mkfifo "$waitFile" 2> /dev/null && (exec nohup "$javaHome/bin/java" -Dexoskeleton.script="$name" -jar "$script" > /dev/null 2>&1 || abort) &
  launchPid=$!
  ensure flock
  flock "$initFile" sh -c "test -f \"$portFile\" || cat \"$waitFile\"" > /dev/null 2>&1 || abort
  rm -f "$initFile"
}

handle() {
  case "$1" in
    TERM) continue=0 ;;
  esac
  printf "s\n%s\n%s\n" "$pid" "$1" | nc -q 1 localhost $port
}

terminate() {
  exit "$(printf "x\n%s\n" "$pid" | nc -q 1 localhost $port)" >/dev/null 2>&1
}

connect() {
  test -t 0 && printf "i\nt\n" || printf "i\np\n"
  printf "%s\n%s\n" "$pid" "$script"
  pwd
  printf "%s\n" "$argCount"
  printf '%s\0' "${args[@]}"
  printf "\n##\n"
  env -0
  printf "\n##\n"
  exec cat
}

connectStderr() {
  printf "e\n%s" "$pid"
}

test -t 0 && ttystate="$(stty -g)"
mkdir -p "$baseDir"
backOut
flock -n "$portFile" rm "$portFile"
test -f "$portFile" || launch
backOut
port=$(<"$portFile")

tmpPipe="$(mktemp -u)"
mkfifo -m 600 "$tmpPipe" && exec 3<> "$tmpPipe" && rm "$tmpPipe"
test -t 0 && stty "${sttyOptions[@]}" > /dev/null 2>&1
connect <&0 >&3 &
stdoutPid=$!
ensure nc
nc -q 1 localhost $port <&3 &
pipePid=$!

for signal in "${signals[@]}"
do trap "handle $signal" "$signal"
done

while [ $continue = 1 ]
do
  wait $pipePid
  ps $pipePid > /dev/null || continue=0
done

test -t 0 && stty "$ttystate"
kill $stdoutPid $launchPid >/dev/null 2>&1
terminate
exit 1
